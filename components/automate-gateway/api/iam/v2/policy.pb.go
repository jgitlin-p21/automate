// Code generated by protoc-gen-go. DO NOT EDIT.
// source: components/automate-gateway/api/iam/v2/policy.proto

package v2

import (
	context "context"
	fmt "fmt"
	request "github.com/chef/automate/components/automate-gateway/api/iam/v2/request"
	response "github.com/chef/automate/components/automate-gateway/api/iam/v2/response"
	_ "github.com/chef/automate/components/automate-grpc/protoc-gen-policy/api"
	_ "github.com/chef/automate/components/automate-grpc/protoc-gen-policy/iam"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() {
	proto.RegisterFile("components/automate-gateway/api/iam/v2/policy.proto", fileDescriptor_2710c589a501c81d)
}

var fileDescriptor_2710c589a501c81d = []byte{
	// 1474 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x98, 0x4b, 0x68, 0x1d, 0x55,
	0x18, 0xc7, 0x99, 0x68, 0xd3, 0xe4, 0x34, 0x69, 0x93, 0x2f, 0x0f, 0xa7, 0x93, 0xd6, 0xd2, 0x63,
	0x9f, 0x63, 0x33, 0xd3, 0xa4, 0xc5, 0xc5, 0x55, 0xb0, 0xd1, 0x42, 0x51, 0x14, 0x24, 0xb4, 0x45,
	0xee, 0x26, 0x4c, 0xee, 0x3d, 0xde, 0x4c, 0xb9, 0xf7, 0xce, 0xc9, 0x9c, 0x49, 0x4a, 0x10, 0x51,
	0x2e, 0x28, 0x72, 0x17, 0x2e, 0xd4, 0xad, 0x5b, 0x77, 0x2e, 0x8a, 0x0c, 0x28, 0x08, 0x8a, 0xe0,
	0x56, 0x50, 0xd7, 0x82, 0x0b, 0xa1, 0xa2, 0x7b, 0x41, 0x11, 0x94, 0x33, 0xcf, 0x33, 0xcf, 0x33,
	0x29, 0xb8, 0x0a, 0x39, 0xdf, 0xff, 0xcc, 0x3d, 0xbf, 0xef, 0x71, 0xe6, 0xfb, 0x06, 0x5d, 0xeb,
	0x38, 0x03, 0xea, 0x0c, 0xc9, 0xd0, 0x63, 0xa6, 0xb5, 0xe7, 0x39, 0x03, 0xcb, 0x23, 0xab, 0x3d,
	0xcb, 0x23, 0xf7, 0xad, 0x03, 0xd3, 0xa2, 0xb6, 0x69, 0x5b, 0x03, 0x73, 0x7f, 0xdd, 0xa4, 0x4e,
	0xdf, 0xee, 0x1c, 0x18, 0xd4, 0x75, 0x3c, 0x07, 0xd4, 0xce, 0x0e, 0x79, 0xc3, 0x88, 0xe5, 0x86,
	0x45, 0x6d, 0xc3, 0xb6, 0x06, 0xc6, 0xfe, 0xba, 0x76, 0xaa, 0xe7, 0x38, 0xbd, 0x3e, 0x09, 0x76,
	0x5a, 0xc3, 0xa1, 0xe3, 0x59, 0x9e, 0xed, 0x0c, 0x59, 0xb8, 0x4f, 0xbb, 0x12, 0xfc, 0xe9, 0xac,
	0xf6, 0xc8, 0x70, 0x95, 0xdd, 0xb7, 0x7a, 0x3d, 0xe2, 0x9a, 0x0e, 0x0d, 0x14, 0x25, 0xea, 0x67,
	0x1b, 0x1e, 0xcd, 0x25, 0xbb, 0x7b, 0x84, 0x79, 0x99, 0x23, 0x6a, 0xcf, 0x35, 0xde, 0xcc, 0xa8,
	0x33, 0x64, 0x24, 0xbb, 0xfb, 0x46, 0xe9, 0x6e, 0x97, 0x76, 0x4c, 0x81, 0x20, 0xdc, 0x51, 0x81,
	0x7a, 0x98, 0x27, 0xf0, 0xa3, 0x14, 0x9e, 0xb0, 0xfe, 0xc5, 0x15, 0x34, 0xf5, 0x1a, 0x17, 0xd8,
	0x84, 0xc1, 0x6f, 0x0a, 0x9a, 0x79, 0xd1, 0x25, 0x96, 0x47, 0x82, 0xa5, 0x03, 0xb8, 0x6c, 0x54,
	0xc5, 0xc0, 0x10, 0x75, 0x9b, 0x64, 0x57, 0xd3, 0x9b, 0x4a, 0x19, 0xc5, 0xef, 0x28, 0x23, 0x5f,
	0x3d, 0x81, 0x66, 0xad, 0x3d, 0x6f, 0xa7, 0x45, 0xa3, 0x5f, 0x1f, 0xf9, 0xea, 0x14, 0x4c, 0x76,
	0x02, 0xed, 0xd8, 0x57, 0x8f, 0xa3, 0x19, 0xdb, 0x1a, 0x24, 0xd6, 0xb1, 0xaf, 0x2e, 0xc1, 0x82,
	0xb8, 0xd2, 0x0a, 0xa5, 0xa3, 0x9f, 0x7e, 0xfd, 0x68, 0xe2, 0x2a, 0x9e, 0xcb, 0xa4, 0x10, 0x37,
	0x2b, 0x7a, 0xfb, 0x24, 0x5e, 0x8c, 0x96, 0xb7, 0x89, 0x67, 0x89, 0x26, 0x78, 0xa8, 0xa0, 0xe9,
	0x5b, 0xc4, 0x8b, 0x38, 0x2f, 0x54, 0x1f, 0x3e, 0x11, 0x71, 0xc8, 0x8b, 0x8d, 0x74, 0x8c, 0xe2,
	0xf7, 0x39, 0xe1, 0x22, 0x82, 0x0c, 0x61, 0xeb, 0x4d, 0xbb, 0xfb, 0xd6, 0xc8, 0x57, 0x8f, 0xc0,
	0x63, 0x3d, 0xe2, 0x8d, 0x7d, 0x75, 0x01, 0xcd, 0x67, 0x88, 0xb8, 0x7d, 0xec, 0xab, 0x00, 0x73,
	0x99, 0xe5, 0x1e, 0xf1, 0x02, 0xca, 0xeb, 0xb0, 0x94, 0xa7, 0x34, 0xf9, 0x96, 0xf6, 0x0a, 0x9c,
	0x2c, 0xe3, 0x0c, 0x8c, 0xf0, 0xb3, 0x82, 0x66, 0x5e, 0xb1, 0x99, 0x97, 0x44, 0xb9, 0x26, 0xa8,
	0xa2, 0x4e, 0x12, 0xd4, 0xac, 0x94, 0x51, 0xbc, 0x5f, 0x1e, 0xd3, 0x49, 0x78, 0xdc, 0x25, 0x56,
	0xb7, 0x34, 0xa2, 0x0b, 0x90, 0xe5, 0xef, 0xdb, 0x2c, 0x24, 0xd5, 0xa1, 0x10, 0xcf, 0xf6, 0x32,
	0x94, 0x06, 0x13, 0xfe, 0x54, 0xd0, 0xcc, 0x4d, 0xd2, 0x27, 0x4d, 0x92, 0x56, 0xd4, 0x49, 0xf8,
	0xb2, 0x52, 0x46, 0xf1, 0x07, 0x75, 0x21, 0x9d, 0x82, 0xc9, 0x6e, 0xb0, 0xa1, 0x3a, 0xaa, 0xf9,
	0xf4, 0x0d, 0xf5, 0x61, 0x60, 0xf5, 0xaa, 0xc0, 0xea, 0x35, 0x81, 0xfd, 0x47, 0x41, 0x33, 0x77,
	0x68, 0xb7, 0x51, 0xb5, 0x8a, 0x3a, 0x09, 0x78, 0x56, 0xca, 0x28, 0xfe, 0x58, 0x02, 0xbe, 0x17,
	0x6c, 0x68, 0x0e, 0x1e, 0xea, 0x03, 0xf0, 0x96, 0x56, 0x0e, 0xce, 0x8b, 0xf7, 0x49, 0xad, 0x9a,
	0x9d, 0x57, 0xf0, 0xdf, 0x0a, 0x9a, 0x4b, 0x8a, 0xee, 0x2e, 0x71, 0x99, 0xed, 0x0c, 0x61, 0xb5,
	0x41, 0x81, 0x46, 0x5a, 0xee, 0x06, 0xe3, 0x30, 0x72, 0x46, 0xf1, 0x7b, 0x8a, 0x2c, 0xc9, 0x45,
	0x1f, 0xc4, 0x5b, 0x6b, 0x4a, 0xfa, 0x19, 0x58, 0xce, 0xbe, 0xfb, 0xb6, 0xf6, 0xc3, 0x3d, 0xed,
	0x53, 0xa0, 0x15, 0xf0, 0x13, 0x2b, 0x7c, 0x32, 0x81, 0xe6, 0x93, 0x0a, 0x3c, 0x78, 0x95, 0x0c,
	0xb6, 0x89, 0xcb, 0xc0, 0x68, 0x50, 0xae, 0xb1, 0x98, 0xe3, 0x9b, 0x87, 0xd2, 0x33, 0x8a, 0x3f,
	0xad, 0x4b, 0x85, 0xd4, 0x09, 0x2b, 0xe8, 0x64, 0x21, 0x11, 0x5a, 0x83, 0xf0, 0x39, 0x63, 0x5f,
	0x7d, 0x02, 0x96, 0x52, 0x1f, 0x45, 0x8f, 0x4f, 0x3c, 0x72, 0x13, 0x4e, 0x97, 0xa6, 0x84, 0x19,
	0xed, 0x6f, 0x3f, 0x05, 0x67, 0x2b, 0xf3, 0x22, 0x16, 0xc1, 0x83, 0x09, 0xb4, 0xb8, 0x49, 0x68,
	0xdf, 0xea, 0x90, 0xac, 0x8b, 0xd6, 0xaa, 0x91, 0xcb, 0xf4, 0xdc, 0x4b, 0xeb, 0x87, 0xdd, 0xc2,
	0x28, 0x7e, 0xd0, 0xb4, 0x66, 0x24, 0xae, 0xd2, 0x40, 0x2d, 0xba, 0x4a, 0x28, 0xa0, 0x97, 0xb5,
	0x7a, 0x6f, 0xf1, 0x42, 0xba, 0xa0, 0xc9, 0x1d, 0xc6, 0x0b, 0xea, 0xab, 0x09, 0xb4, 0xb0, 0x49,
	0x06, 0xce, 0x7e, 0xce, 0x65, 0x57, 0xeb, 0xf8, 0x0b, 0x72, 0xee, 0xb1, 0xb5, 0x43, 0xee, 0x60,
	0x14, 0x7f, 0xdd, 0xf4, 0x76, 0x7d, 0x14, 0x87, 0x09, 0x57, 0xed, 0xeb, 0xf8, 0x5c, 0xbd, 0xc3,
	0xdc, 0xe0, 0x80, 0xdc, 0x6f, 0xab, 0xf8, 0x92, 0xdc, 0x6f, 0x89, 0x1c, 0x3e, 0x9b, 0x40, 0x73,
	0x1b, 0xdd, 0x6e, 0xd6, 0x77, 0x35, 0xf7, 0x51, 0x5e, 0x2b, 0xb9, 0x8f, 0x8a, 0x72, 0x46, 0xf1,
	0x97, 0x12, 0xaf, 0x25, 0xdd, 0xd4, 0xa3, 0x78, 0x4d, 0xe8, 0xaf, 0x36, 0xf1, 0xd9, 0x7a, 0xaf,
	0x59, 0xdd, 0x2e, 0x77, 0x99, 0x8e, 0xcf, 0xcb, 0x5d, 0x16, 0x6a, 0xe1, 0x47, 0x05, 0xa1, 0xb0,
	0x33, 0xdc, 0x74, 0xfa, 0x04, 0x2e, 0xca, 0xfa, 0x47, 0xae, 0xe2, 0x3e, 0xba, 0xd4, 0x4c, 0xc8,
	0x28, 0xde, 0x1d, 0xf9, 0xea, 0x0c, 0x42, 0x81, 0x73, 0x5c, 0xa7, 0x5f, 0x68, 0x31, 0x8f, 0xa1,
	0x69, 0x4e, 0x1d, 0x98, 0xd2, 0x3b, 0x3a, 0xf8, 0x57, 0x84, 0xd7, 0xf1, 0x6c, 0xd2, 0xc7, 0x07,
	0x36, 0x45, 0x6f, 0x2f, 0xe3, 0x79, 0x11, 0x34, 0x5e, 0x87, 0xef, 0x14, 0x34, 0xcd, 0xaf, 0x4e,
	0x7e, 0x06, 0x56, 0xd7, 0x56, 0x26, 0x22, 0x49, 0x5b, 0x29, 0xe8, 0x18, 0xc5, 0xbd, 0x12, 0xa2,
	0xf4, 0xda, 0xcd, 0xf1, 0xcc, 0xc1, 0xf1, 0x94, 0x27, 0x69, 0xad, 0xce, 0x41, 0x96, 0xa6, 0xbd,
	0x00, 0x45, 0x14, 0xf8, 0x41, 0x41, 0x47, 0x6f, 0x91, 0xe0, 0x97, 0xe1, 0x5c, 0xed, 0x4b, 0x32,
	0x0e, 0xcb, 0xf9, 0x06, 0x2a, 0x46, 0xf1, 0xc1, 0xc8, 0x57, 0xe7, 0xd1, 0x89, 0x94, 0xa0, 0xd0,
	0x14, 0xcf, 0x21, 0xe1, 0xd8, 0x51, 0x0b, 0x71, 0x02, 0x66, 0xd3, 0xb5, 0xf8, 0x4d, 0x61, 0x00,
	0x64, 0x48, 0xc2, 0x96, 0x49, 0x4d, 0xde, 0xa8, 0x29, 0x4e, 0xd8, 0x2f, 0xfd, 0xa2, 0x20, 0x14,
	0x76, 0x75, 0xb2, 0x84, 0x4b, 0x55, 0x92, 0x84, 0x13, 0x85, 0x8c, 0xe2, 0xb7, 0xab, 0xe0, 0xc4,
	0x0b, 0xac, 0x8c, 0x2f, 0x93, 0x7a, 0xc2, 0x6d, 0x65, 0xe8, 0xa5, 0x88, 0x7a, 0x15, 0xe2, 0x43,
	0x05, 0xa1, 0xb0, 0x7f, 0x93, 0x21, 0xa6, 0x2a, 0x09, 0xa2, 0x28, 0x64, 0x14, 0xbf, 0xab, 0xd4,
	0x30, 0x26, 0x6f, 0x35, 0x29, 0xa3, 0xf0, 0x0a, 0xbb, 0xae, 0x95, 0x30, 0xf2, 0x1a, 0x5b, 0xd1,
	0x2a, 0x30, 0x79, 0xa1, 0xfd, 0xa1, 0xa0, 0xd9, 0x68, 0xae, 0x74, 0x9d, 0x7b, 0xa4, 0xe3, 0x81,
	0x7c, 0x00, 0x0d, 0x85, 0x9c, 0xf7, 0xe9, 0xc6, 0xda, 0xc2, 0xb4, 0x1a, 0x1a, 0xaa, 0xa6, 0xd5,
	0xc8, 0x2a, 0x74, 0xbd, 0xd1, 0x4a, 0xd5, 0xb4, 0x1a, 0x9b, 0x4b, 0xa6, 0xd5, 0xd4, 0x04, 0xff,
	0x2a, 0x68, 0x36, 0xea, 0xcb, 0xe5, 0xb4, 0x19, 0xa1, 0x84, 0x36, 0xa7, 0x2d, 0x74, 0xfb, 0xf1,
	0x19, 0x6a, 0xba, 0x7d, 0x51, 0x52, 0xc2, 0x5d, 0xd1, 0xed, 0x47, 0xe6, 0xca, 0x6e, 0x3f, 0x67,
	0x87, 0xdf, 0x15, 0x84, 0x78, 0x4b, 0x1e, 0xe1, 0x4b, 0x06, 0xf1, 0x94, 0xfd, 0x52, 0x33, 0x61,
	0x61, 0x64, 0xcf, 0x81, 0x17, 0x46, 0xf6, 0x1c, 0x75, 0xdc, 0xdf, 0xc7, 0xcb, 0x65, 0x23, 0xbb,
	0x88, 0x54, 0x18, 0xd9, 0x45, 0x63, 0x3a, 0xb2, 0x47, 0xab, 0xd2, 0x91, 0x3d, 0xd2, 0x35, 0x19,
	0xd9, 0x13, 0x69, 0x7e, 0x64, 0x4f, 0x13, 0xbb, 0x38, 0xb2, 0xa7, 0x69, 0x1d, 0x8f, 0xec, 0x31,
	0x68, 0xe9, 0xc8, 0x1e, 0x19, 0x0b, 0x23, 0x7b, 0x8c, 0xf3, 0x97, 0x82, 0x66, 0xa3, 0xf9, 0x5a,
	0x9e, 0xce, 0x19, 0xa1, 0x24, 0x9d, 0x73, 0xda, 0xc2, 0xd4, 0x5e, 0x4c, 0xe7, 0xc2, 0xd4, 0x2e,
	0x49, 0xe7, 0x8a, 0xa9, 0x3d, 0x1b, 0x5b, 0xbd, 0x26, 0xb6, 0xdf, 0x2b, 0xe8, 0xd8, 0x1d, 0xda,
	0x73, 0xad, 0x2e, 0xb9, 0xed, 0xdc, 0x5d, 0x87, 0xda, 0xab, 0x37, 0x91, 0x71, 0xee, 0xcb, 0x0d,
	0x95, 0x8c, 0xe2, 0x7b, 0x1f, 0x6e, 0x4c, 0xa1, 0xc9, 0x1d, 0xbb, 0xdb, 0x25, 0xc3, 0x91, 0xaf,
	0x6a, 0x48, 0x65, 0x07, 0xcc, 0x23, 0x83, 0x16, 0x67, 0xd9, 0x0b, 0xc5, 0x5b, 0x9e, 0xb3, 0xb5,
	0xbf, 0x3e, 0xf2, 0xd5, 0x69, 0x38, 0x1a, 0x2d, 0x8d, 0x7d, 0x55, 0x45, 0xcb, 0x45, 0x29, 0x7f,
	0xee, 0xd8, 0x57, 0x17, 0x01, 0x8a, 0x36, 0xf8, 0x46, 0x41, 0xd3, 0x9b, 0x84, 0x11, 0xef, 0xb6,
	0x73, 0x77, 0xad, 0xae, 0xe5, 0x49, 0x44, 0x92, 0x96, 0x47, 0xd0, 0x31, 0x8a, 0xb7, 0xb3, 0x28,
	0xd9, 0xf3, 0xb9, 0x5c, 0x1a, 0x80, 0xac, 0x8d, 0x7c, 0xf5, 0x28, 0x1c, 0x09, 0x16, 0xc6, 0xbe,
	0xba, 0x8c, 0x16, 0xf3, 0x32, 0xfe, 0xc4, 0xb0, 0x52, 0xf3, 0x16, 0xf8, 0x7c, 0x02, 0x2d, 0xbd,
	0x34, 0xf4, 0x5c, 0x87, 0x51, 0xd2, 0xf1, 0x36, 0xfa, 0xfd, 0xff, 0xbb, 0xf0, 0xbe, 0x55, 0xb2,
	0x54, 0x57, 0x90, 0xce, 0x13, 0x74, 0xcb, 0x4e, 0x0e, 0x61, 0x3b, 0xc3, 0x56, 0xfa, 0xdf, 0x96,
	0xd5, 0xef, 0x6f, 0x95, 0x56, 0x68, 0xf4, 0xa6, 0x4d, 0xa5, 0x63, 0x5f, 0x3d, 0x03, 0xa7, 0xb3,
	0x6b, 0xfc, 0x3a, 0x12, 0xa8, 0x82, 0xec, 0xbd, 0x01, 0x2b, 0x71, 0xf6, 0x0a, 0xbf, 0x93, 0x94,
	0xee, 0x59, 0x38, 0x23, 0xe6, 0x70, 0x89, 0xe4, 0x85, 0x8d, 0xf6, 0xf3, 0x3d, 0xdb, 0xdb, 0xd9,
	0xdb, 0x36, 0x3a, 0xce, 0xc0, 0xe4, 0xf0, 0xc9, 0x37, 0x68, 0xb3, 0xd9, 0x77, 0xf1, 0xed, 0xc9,
	0xe0, 0x23, 0xf4, 0xb5, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0x00, 0xff, 0x3a, 0x78, 0x20, 0x18,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PoliciesClient is the client API for Policies service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PoliciesClient interface {
	//
	//Create a new policy
	//
	//Creates a new IAM policy used to control permissions in Automate.
	//A policy is composed of one or more statements that act on a set of members.
	//Each statement contains a role as well as a list of projects.
	//
	//The role defines a set of actions that the statement is scoped to.
	//The project list defines the set of resources that the statement is scoped to.
	//Pass `"projects": ["*"]` to scope a statement to every project.
	//
	//The top-level projects list for the policy defines which project(s) the policy belongs to,
	//whereas the statement level projects list defines which project(s) the statement applies to.
	//
	//This example creates a new policy in the (unassigned) project that grants the viewer role
	//on a few projects for all LDAP teams:
	//
	//```
	//{
	//"name": "My Viewer Policy",
	//"id": "viewer-policy",
	//"members": ["team:ldap:*"],
	//"statements" : [
	//{
	//"role": "viewer",
	//"projects": ["project1", "project2"]
	//}
	//],
	//"projects": []
	//}
	//```
	CreatePolicy(ctx context.Context, in *request.CreatePolicyReq, opts ...grpc.CallOption) (*response.CreatePolicyResp, error)
	//
	//Get an IAM policy
	GetPolicy(ctx context.Context, in *request.GetPolicyReq, opts ...grpc.CallOption) (*response.GetPolicyResp, error)
	//
	//List all IAM policies
	ListPolicies(ctx context.Context, in *request.ListPoliciesReq, opts ...grpc.CallOption) (*response.ListPoliciesResp, error)
	//
	//Delete an IAM policy
	DeletePolicy(ctx context.Context, in *request.DeletePolicyReq, opts ...grpc.CallOption) (*response.DeletePolicyResp, error)
	//
	//Update an existing IAM policy
	//
	//Very similar to create except the ID cannot be changed.
	UpdatePolicy(ctx context.Context, in *request.UpdatePolicyReq, opts ...grpc.CallOption) (*response.UpdatePolicyResp, error)
	//
	//Get IAM version
	//
	//Returns the major and minor version of IAM that your automate installation is running.
	GetPolicyVersion(ctx context.Context, in *request.GetPolicyVersionReq, opts ...grpc.CallOption) (*response.GetPolicyVersionResp, error)
	//
	//List policy members
	//
	//List all members of a specific policy.
	ListPolicyMembers(ctx context.Context, in *request.ListPolicyMembersReq, opts ...grpc.CallOption) (*response.ListPolicyMembersResp, error)
	//
	//Replace policy members
	//
	//Replace the entire member list for a specific policy with a new list.
	ReplacePolicyMembers(ctx context.Context, in *request.ReplacePolicyMembersReq, opts ...grpc.CallOption) (*response.ReplacePolicyMembersResp, error)
	//
	//Remove policy members
	//
	//Remove specific members from the member list for a specific policy. Silently ignores
	//members that are not part of the member list.
	RemovePolicyMembers(ctx context.Context, in *request.RemovePolicyMembersReq, opts ...grpc.CallOption) (*response.RemovePolicyMembersResp, error)
	//
	//Add policy members
	//
	//Add specific members to the member list for a specific policy.
	AddPolicyMembers(ctx context.Context, in *request.AddPolicyMembersReq, opts ...grpc.CallOption) (*response.AddPolicyMembersResp, error)
	//
	//Create a new role
	//
	//Creates a new role to be used in the IAM policies that control permissions in Automate.
	//
	//A role defines the scope for a set of actions.
	CreateRole(ctx context.Context, in *request.CreateRoleReq, opts ...grpc.CallOption) (*response.CreateRoleResp, error)
	//
	//List all roles
	ListRoles(ctx context.Context, in *request.ListRolesReq, opts ...grpc.CallOption) (*response.ListRolesResp, error)
	//
	//Get a role
	GetRole(ctx context.Context, in *request.GetRoleReq, opts ...grpc.CallOption) (*response.GetRoleResp, error)
	//
	//Delete a role
	//
	//This will cascade delete any statements that only contain this role.
	//If the resulting policy has no statements, it is also deleted.
	DeleteRole(ctx context.Context, in *request.DeleteRoleReq, opts ...grpc.CallOption) (*response.DeleteRoleResp, error)
	//
	//Update a role
	//
	//Update an existing role. Very similar to create except the ID cannot be changed.
	UpdateRole(ctx context.Context, in *request.UpdateRoleReq, opts ...grpc.CallOption) (*response.UpdateRoleResp, error)
	//
	//Create a project
	//
	//Creates a new project to be used in the IAM policies that control permissions in Automate.
	//
	//A project defines the scope for a set of resources. A resource can be in more than one project.
	CreateProject(ctx context.Context, in *request.CreateProjectReq, opts ...grpc.CallOption) (*response.CreateProjectResp, error)
	//
	//Update a project
	//
	//Update an existing project. Very similar to create except the ID cannot be changed.
	UpdateProject(ctx context.Context, in *request.UpdateProjectReq, opts ...grpc.CallOption) (*response.UpdateProjectResp, error)
	//
	//Get a project
	GetProject(ctx context.Context, in *request.GetProjectReq, opts ...grpc.CallOption) (*response.GetProjectResp, error)
	//
	//List all projects
	ListProjects(ctx context.Context, in *request.ListProjectsReq, opts ...grpc.CallOption) (*response.ListProjectsResp, error)
	//
	//Delete a project
	//
	//Deletes a project. Cascade deletes the project from any resources tagged with it.
	//If a resulting resource no longer belongs to any project, it goes into the (unassigned) project.
	//
	//Also cascade deletes this project from any project list in all statements.
	//If the resulting project list for a given statement is empty, it is deleted.
	//If the resulting policy has no statements, it is also deleted.
	DeleteProject(ctx context.Context, in *request.DeleteProjectReq, opts ...grpc.CallOption) (*response.DeleteProjectResp, error)
	// Expose on GRPC API only so we don't expose this to the enduser.
	// Just want to be able to trigger this via automate-cli.
	UpgradeToV2(ctx context.Context, in *request.UpgradeToV2Req, opts ...grpc.CallOption) (*response.UpgradeToV2Resp, error)
	ResetToV1(ctx context.Context, in *request.ResetToV1Req, opts ...grpc.CallOption) (*response.ResetToV1Resp, error)
	IntrospectAllProjects(ctx context.Context, in *request.ListProjectsReq, opts ...grpc.CallOption) (*response.ListProjectsResp, error)
}

type policiesClient struct {
	cc *grpc.ClientConn
}

func NewPoliciesClient(cc *grpc.ClientConn) PoliciesClient {
	return &policiesClient{cc}
}

func (c *policiesClient) CreatePolicy(ctx context.Context, in *request.CreatePolicyReq, opts ...grpc.CallOption) (*response.CreatePolicyResp, error) {
	out := new(response.CreatePolicyResp)
	err := c.cc.Invoke(ctx, "/chef.automate.api.iam.v2.Policies/CreatePolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policiesClient) GetPolicy(ctx context.Context, in *request.GetPolicyReq, opts ...grpc.CallOption) (*response.GetPolicyResp, error) {
	out := new(response.GetPolicyResp)
	err := c.cc.Invoke(ctx, "/chef.automate.api.iam.v2.Policies/GetPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policiesClient) ListPolicies(ctx context.Context, in *request.ListPoliciesReq, opts ...grpc.CallOption) (*response.ListPoliciesResp, error) {
	out := new(response.ListPoliciesResp)
	err := c.cc.Invoke(ctx, "/chef.automate.api.iam.v2.Policies/ListPolicies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policiesClient) DeletePolicy(ctx context.Context, in *request.DeletePolicyReq, opts ...grpc.CallOption) (*response.DeletePolicyResp, error) {
	out := new(response.DeletePolicyResp)
	err := c.cc.Invoke(ctx, "/chef.automate.api.iam.v2.Policies/DeletePolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policiesClient) UpdatePolicy(ctx context.Context, in *request.UpdatePolicyReq, opts ...grpc.CallOption) (*response.UpdatePolicyResp, error) {
	out := new(response.UpdatePolicyResp)
	err := c.cc.Invoke(ctx, "/chef.automate.api.iam.v2.Policies/UpdatePolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policiesClient) GetPolicyVersion(ctx context.Context, in *request.GetPolicyVersionReq, opts ...grpc.CallOption) (*response.GetPolicyVersionResp, error) {
	out := new(response.GetPolicyVersionResp)
	err := c.cc.Invoke(ctx, "/chef.automate.api.iam.v2.Policies/GetPolicyVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policiesClient) ListPolicyMembers(ctx context.Context, in *request.ListPolicyMembersReq, opts ...grpc.CallOption) (*response.ListPolicyMembersResp, error) {
	out := new(response.ListPolicyMembersResp)
	err := c.cc.Invoke(ctx, "/chef.automate.api.iam.v2.Policies/ListPolicyMembers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policiesClient) ReplacePolicyMembers(ctx context.Context, in *request.ReplacePolicyMembersReq, opts ...grpc.CallOption) (*response.ReplacePolicyMembersResp, error) {
	out := new(response.ReplacePolicyMembersResp)
	err := c.cc.Invoke(ctx, "/chef.automate.api.iam.v2.Policies/ReplacePolicyMembers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policiesClient) RemovePolicyMembers(ctx context.Context, in *request.RemovePolicyMembersReq, opts ...grpc.CallOption) (*response.RemovePolicyMembersResp, error) {
	out := new(response.RemovePolicyMembersResp)
	err := c.cc.Invoke(ctx, "/chef.automate.api.iam.v2.Policies/RemovePolicyMembers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policiesClient) AddPolicyMembers(ctx context.Context, in *request.AddPolicyMembersReq, opts ...grpc.CallOption) (*response.AddPolicyMembersResp, error) {
	out := new(response.AddPolicyMembersResp)
	err := c.cc.Invoke(ctx, "/chef.automate.api.iam.v2.Policies/AddPolicyMembers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policiesClient) CreateRole(ctx context.Context, in *request.CreateRoleReq, opts ...grpc.CallOption) (*response.CreateRoleResp, error) {
	out := new(response.CreateRoleResp)
	err := c.cc.Invoke(ctx, "/chef.automate.api.iam.v2.Policies/CreateRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policiesClient) ListRoles(ctx context.Context, in *request.ListRolesReq, opts ...grpc.CallOption) (*response.ListRolesResp, error) {
	out := new(response.ListRolesResp)
	err := c.cc.Invoke(ctx, "/chef.automate.api.iam.v2.Policies/ListRoles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policiesClient) GetRole(ctx context.Context, in *request.GetRoleReq, opts ...grpc.CallOption) (*response.GetRoleResp, error) {
	out := new(response.GetRoleResp)
	err := c.cc.Invoke(ctx, "/chef.automate.api.iam.v2.Policies/GetRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policiesClient) DeleteRole(ctx context.Context, in *request.DeleteRoleReq, opts ...grpc.CallOption) (*response.DeleteRoleResp, error) {
	out := new(response.DeleteRoleResp)
	err := c.cc.Invoke(ctx, "/chef.automate.api.iam.v2.Policies/DeleteRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policiesClient) UpdateRole(ctx context.Context, in *request.UpdateRoleReq, opts ...grpc.CallOption) (*response.UpdateRoleResp, error) {
	out := new(response.UpdateRoleResp)
	err := c.cc.Invoke(ctx, "/chef.automate.api.iam.v2.Policies/UpdateRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policiesClient) CreateProject(ctx context.Context, in *request.CreateProjectReq, opts ...grpc.CallOption) (*response.CreateProjectResp, error) {
	out := new(response.CreateProjectResp)
	err := c.cc.Invoke(ctx, "/chef.automate.api.iam.v2.Policies/CreateProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policiesClient) UpdateProject(ctx context.Context, in *request.UpdateProjectReq, opts ...grpc.CallOption) (*response.UpdateProjectResp, error) {
	out := new(response.UpdateProjectResp)
	err := c.cc.Invoke(ctx, "/chef.automate.api.iam.v2.Policies/UpdateProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policiesClient) GetProject(ctx context.Context, in *request.GetProjectReq, opts ...grpc.CallOption) (*response.GetProjectResp, error) {
	out := new(response.GetProjectResp)
	err := c.cc.Invoke(ctx, "/chef.automate.api.iam.v2.Policies/GetProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policiesClient) ListProjects(ctx context.Context, in *request.ListProjectsReq, opts ...grpc.CallOption) (*response.ListProjectsResp, error) {
	out := new(response.ListProjectsResp)
	err := c.cc.Invoke(ctx, "/chef.automate.api.iam.v2.Policies/ListProjects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policiesClient) DeleteProject(ctx context.Context, in *request.DeleteProjectReq, opts ...grpc.CallOption) (*response.DeleteProjectResp, error) {
	out := new(response.DeleteProjectResp)
	err := c.cc.Invoke(ctx, "/chef.automate.api.iam.v2.Policies/DeleteProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policiesClient) UpgradeToV2(ctx context.Context, in *request.UpgradeToV2Req, opts ...grpc.CallOption) (*response.UpgradeToV2Resp, error) {
	out := new(response.UpgradeToV2Resp)
	err := c.cc.Invoke(ctx, "/chef.automate.api.iam.v2.Policies/UpgradeToV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policiesClient) ResetToV1(ctx context.Context, in *request.ResetToV1Req, opts ...grpc.CallOption) (*response.ResetToV1Resp, error) {
	out := new(response.ResetToV1Resp)
	err := c.cc.Invoke(ctx, "/chef.automate.api.iam.v2.Policies/ResetToV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policiesClient) IntrospectAllProjects(ctx context.Context, in *request.ListProjectsReq, opts ...grpc.CallOption) (*response.ListProjectsResp, error) {
	out := new(response.ListProjectsResp)
	err := c.cc.Invoke(ctx, "/chef.automate.api.iam.v2.Policies/IntrospectAllProjects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PoliciesServer is the server API for Policies service.
type PoliciesServer interface {
	//
	//Create a new policy
	//
	//Creates a new IAM policy used to control permissions in Automate.
	//A policy is composed of one or more statements that act on a set of members.
	//Each statement contains a role as well as a list of projects.
	//
	//The role defines a set of actions that the statement is scoped to.
	//The project list defines the set of resources that the statement is scoped to.
	//Pass `"projects": ["*"]` to scope a statement to every project.
	//
	//The top-level projects list for the policy defines which project(s) the policy belongs to,
	//whereas the statement level projects list defines which project(s) the statement applies to.
	//
	//This example creates a new policy in the (unassigned) project that grants the viewer role
	//on a few projects for all LDAP teams:
	//
	//```
	//{
	//"name": "My Viewer Policy",
	//"id": "viewer-policy",
	//"members": ["team:ldap:*"],
	//"statements" : [
	//{
	//"role": "viewer",
	//"projects": ["project1", "project2"]
	//}
	//],
	//"projects": []
	//}
	//```
	CreatePolicy(context.Context, *request.CreatePolicyReq) (*response.CreatePolicyResp, error)
	//
	//Get an IAM policy
	GetPolicy(context.Context, *request.GetPolicyReq) (*response.GetPolicyResp, error)
	//
	//List all IAM policies
	ListPolicies(context.Context, *request.ListPoliciesReq) (*response.ListPoliciesResp, error)
	//
	//Delete an IAM policy
	DeletePolicy(context.Context, *request.DeletePolicyReq) (*response.DeletePolicyResp, error)
	//
	//Update an existing IAM policy
	//
	//Very similar to create except the ID cannot be changed.
	UpdatePolicy(context.Context, *request.UpdatePolicyReq) (*response.UpdatePolicyResp, error)
	//
	//Get IAM version
	//
	//Returns the major and minor version of IAM that your automate installation is running.
	GetPolicyVersion(context.Context, *request.GetPolicyVersionReq) (*response.GetPolicyVersionResp, error)
	//
	//List policy members
	//
	//List all members of a specific policy.
	ListPolicyMembers(context.Context, *request.ListPolicyMembersReq) (*response.ListPolicyMembersResp, error)
	//
	//Replace policy members
	//
	//Replace the entire member list for a specific policy with a new list.
	ReplacePolicyMembers(context.Context, *request.ReplacePolicyMembersReq) (*response.ReplacePolicyMembersResp, error)
	//
	//Remove policy members
	//
	//Remove specific members from the member list for a specific policy. Silently ignores
	//members that are not part of the member list.
	RemovePolicyMembers(context.Context, *request.RemovePolicyMembersReq) (*response.RemovePolicyMembersResp, error)
	//
	//Add policy members
	//
	//Add specific members to the member list for a specific policy.
	AddPolicyMembers(context.Context, *request.AddPolicyMembersReq) (*response.AddPolicyMembersResp, error)
	//
	//Create a new role
	//
	//Creates a new role to be used in the IAM policies that control permissions in Automate.
	//
	//A role defines the scope for a set of actions.
	CreateRole(context.Context, *request.CreateRoleReq) (*response.CreateRoleResp, error)
	//
	//List all roles
	ListRoles(context.Context, *request.ListRolesReq) (*response.ListRolesResp, error)
	//
	//Get a role
	GetRole(context.Context, *request.GetRoleReq) (*response.GetRoleResp, error)
	//
	//Delete a role
	//
	//This will cascade delete any statements that only contain this role.
	//If the resulting policy has no statements, it is also deleted.
	DeleteRole(context.Context, *request.DeleteRoleReq) (*response.DeleteRoleResp, error)
	//
	//Update a role
	//
	//Update an existing role. Very similar to create except the ID cannot be changed.
	UpdateRole(context.Context, *request.UpdateRoleReq) (*response.UpdateRoleResp, error)
	//
	//Create a project
	//
	//Creates a new project to be used in the IAM policies that control permissions in Automate.
	//
	//A project defines the scope for a set of resources. A resource can be in more than one project.
	CreateProject(context.Context, *request.CreateProjectReq) (*response.CreateProjectResp, error)
	//
	//Update a project
	//
	//Update an existing project. Very similar to create except the ID cannot be changed.
	UpdateProject(context.Context, *request.UpdateProjectReq) (*response.UpdateProjectResp, error)
	//
	//Get a project
	GetProject(context.Context, *request.GetProjectReq) (*response.GetProjectResp, error)
	//
	//List all projects
	ListProjects(context.Context, *request.ListProjectsReq) (*response.ListProjectsResp, error)
	//
	//Delete a project
	//
	//Deletes a project. Cascade deletes the project from any resources tagged with it.
	//If a resulting resource no longer belongs to any project, it goes into the (unassigned) project.
	//
	//Also cascade deletes this project from any project list in all statements.
	//If the resulting project list for a given statement is empty, it is deleted.
	//If the resulting policy has no statements, it is also deleted.
	DeleteProject(context.Context, *request.DeleteProjectReq) (*response.DeleteProjectResp, error)
	// Expose on GRPC API only so we don't expose this to the enduser.
	// Just want to be able to trigger this via automate-cli.
	UpgradeToV2(context.Context, *request.UpgradeToV2Req) (*response.UpgradeToV2Resp, error)
	ResetToV1(context.Context, *request.ResetToV1Req) (*response.ResetToV1Resp, error)
	IntrospectAllProjects(context.Context, *request.ListProjectsReq) (*response.ListProjectsResp, error)
}

// UnimplementedPoliciesServer can be embedded to have forward compatible implementations.
type UnimplementedPoliciesServer struct {
}

func (*UnimplementedPoliciesServer) CreatePolicy(ctx context.Context, req *request.CreatePolicyReq) (*response.CreatePolicyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePolicy not implemented")
}
func (*UnimplementedPoliciesServer) GetPolicy(ctx context.Context, req *request.GetPolicyReq) (*response.GetPolicyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPolicy not implemented")
}
func (*UnimplementedPoliciesServer) ListPolicies(ctx context.Context, req *request.ListPoliciesReq) (*response.ListPoliciesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPolicies not implemented")
}
func (*UnimplementedPoliciesServer) DeletePolicy(ctx context.Context, req *request.DeletePolicyReq) (*response.DeletePolicyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePolicy not implemented")
}
func (*UnimplementedPoliciesServer) UpdatePolicy(ctx context.Context, req *request.UpdatePolicyReq) (*response.UpdatePolicyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePolicy not implemented")
}
func (*UnimplementedPoliciesServer) GetPolicyVersion(ctx context.Context, req *request.GetPolicyVersionReq) (*response.GetPolicyVersionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPolicyVersion not implemented")
}
func (*UnimplementedPoliciesServer) ListPolicyMembers(ctx context.Context, req *request.ListPolicyMembersReq) (*response.ListPolicyMembersResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPolicyMembers not implemented")
}
func (*UnimplementedPoliciesServer) ReplacePolicyMembers(ctx context.Context, req *request.ReplacePolicyMembersReq) (*response.ReplacePolicyMembersResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplacePolicyMembers not implemented")
}
func (*UnimplementedPoliciesServer) RemovePolicyMembers(ctx context.Context, req *request.RemovePolicyMembersReq) (*response.RemovePolicyMembersResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePolicyMembers not implemented")
}
func (*UnimplementedPoliciesServer) AddPolicyMembers(ctx context.Context, req *request.AddPolicyMembersReq) (*response.AddPolicyMembersResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPolicyMembers not implemented")
}
func (*UnimplementedPoliciesServer) CreateRole(ctx context.Context, req *request.CreateRoleReq) (*response.CreateRoleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRole not implemented")
}
func (*UnimplementedPoliciesServer) ListRoles(ctx context.Context, req *request.ListRolesReq) (*response.ListRolesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRoles not implemented")
}
func (*UnimplementedPoliciesServer) GetRole(ctx context.Context, req *request.GetRoleReq) (*response.GetRoleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRole not implemented")
}
func (*UnimplementedPoliciesServer) DeleteRole(ctx context.Context, req *request.DeleteRoleReq) (*response.DeleteRoleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRole not implemented")
}
func (*UnimplementedPoliciesServer) UpdateRole(ctx context.Context, req *request.UpdateRoleReq) (*response.UpdateRoleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRole not implemented")
}
func (*UnimplementedPoliciesServer) CreateProject(ctx context.Context, req *request.CreateProjectReq) (*response.CreateProjectResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProject not implemented")
}
func (*UnimplementedPoliciesServer) UpdateProject(ctx context.Context, req *request.UpdateProjectReq) (*response.UpdateProjectResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProject not implemented")
}
func (*UnimplementedPoliciesServer) GetProject(ctx context.Context, req *request.GetProjectReq) (*response.GetProjectResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProject not implemented")
}
func (*UnimplementedPoliciesServer) ListProjects(ctx context.Context, req *request.ListProjectsReq) (*response.ListProjectsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProjects not implemented")
}
func (*UnimplementedPoliciesServer) DeleteProject(ctx context.Context, req *request.DeleteProjectReq) (*response.DeleteProjectResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProject not implemented")
}
func (*UnimplementedPoliciesServer) UpgradeToV2(ctx context.Context, req *request.UpgradeToV2Req) (*response.UpgradeToV2Resp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpgradeToV2 not implemented")
}
func (*UnimplementedPoliciesServer) ResetToV1(ctx context.Context, req *request.ResetToV1Req) (*response.ResetToV1Resp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetToV1 not implemented")
}
func (*UnimplementedPoliciesServer) IntrospectAllProjects(ctx context.Context, req *request.ListProjectsReq) (*response.ListProjectsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IntrospectAllProjects not implemented")
}

func RegisterPoliciesServer(s *grpc.Server, srv PoliciesServer) {
	s.RegisterService(&_Policies_serviceDesc, srv)
}

func _Policies_CreatePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.CreatePolicyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoliciesServer).CreatePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.iam.v2.Policies/CreatePolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoliciesServer).CreatePolicy(ctx, req.(*request.CreatePolicyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Policies_GetPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.GetPolicyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoliciesServer).GetPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.iam.v2.Policies/GetPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoliciesServer).GetPolicy(ctx, req.(*request.GetPolicyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Policies_ListPolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.ListPoliciesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoliciesServer).ListPolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.iam.v2.Policies/ListPolicies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoliciesServer).ListPolicies(ctx, req.(*request.ListPoliciesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Policies_DeletePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.DeletePolicyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoliciesServer).DeletePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.iam.v2.Policies/DeletePolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoliciesServer).DeletePolicy(ctx, req.(*request.DeletePolicyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Policies_UpdatePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.UpdatePolicyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoliciesServer).UpdatePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.iam.v2.Policies/UpdatePolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoliciesServer).UpdatePolicy(ctx, req.(*request.UpdatePolicyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Policies_GetPolicyVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.GetPolicyVersionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoliciesServer).GetPolicyVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.iam.v2.Policies/GetPolicyVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoliciesServer).GetPolicyVersion(ctx, req.(*request.GetPolicyVersionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Policies_ListPolicyMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.ListPolicyMembersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoliciesServer).ListPolicyMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.iam.v2.Policies/ListPolicyMembers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoliciesServer).ListPolicyMembers(ctx, req.(*request.ListPolicyMembersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Policies_ReplacePolicyMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.ReplacePolicyMembersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoliciesServer).ReplacePolicyMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.iam.v2.Policies/ReplacePolicyMembers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoliciesServer).ReplacePolicyMembers(ctx, req.(*request.ReplacePolicyMembersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Policies_RemovePolicyMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.RemovePolicyMembersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoliciesServer).RemovePolicyMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.iam.v2.Policies/RemovePolicyMembers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoliciesServer).RemovePolicyMembers(ctx, req.(*request.RemovePolicyMembersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Policies_AddPolicyMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.AddPolicyMembersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoliciesServer).AddPolicyMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.iam.v2.Policies/AddPolicyMembers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoliciesServer).AddPolicyMembers(ctx, req.(*request.AddPolicyMembersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Policies_CreateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.CreateRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoliciesServer).CreateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.iam.v2.Policies/CreateRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoliciesServer).CreateRole(ctx, req.(*request.CreateRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Policies_ListRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.ListRolesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoliciesServer).ListRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.iam.v2.Policies/ListRoles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoliciesServer).ListRoles(ctx, req.(*request.ListRolesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Policies_GetRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.GetRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoliciesServer).GetRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.iam.v2.Policies/GetRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoliciesServer).GetRole(ctx, req.(*request.GetRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Policies_DeleteRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.DeleteRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoliciesServer).DeleteRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.iam.v2.Policies/DeleteRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoliciesServer).DeleteRole(ctx, req.(*request.DeleteRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Policies_UpdateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.UpdateRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoliciesServer).UpdateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.iam.v2.Policies/UpdateRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoliciesServer).UpdateRole(ctx, req.(*request.UpdateRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Policies_CreateProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.CreateProjectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoliciesServer).CreateProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.iam.v2.Policies/CreateProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoliciesServer).CreateProject(ctx, req.(*request.CreateProjectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Policies_UpdateProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.UpdateProjectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoliciesServer).UpdateProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.iam.v2.Policies/UpdateProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoliciesServer).UpdateProject(ctx, req.(*request.UpdateProjectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Policies_GetProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.GetProjectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoliciesServer).GetProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.iam.v2.Policies/GetProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoliciesServer).GetProject(ctx, req.(*request.GetProjectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Policies_ListProjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.ListProjectsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoliciesServer).ListProjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.iam.v2.Policies/ListProjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoliciesServer).ListProjects(ctx, req.(*request.ListProjectsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Policies_DeleteProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.DeleteProjectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoliciesServer).DeleteProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.iam.v2.Policies/DeleteProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoliciesServer).DeleteProject(ctx, req.(*request.DeleteProjectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Policies_UpgradeToV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.UpgradeToV2Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoliciesServer).UpgradeToV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.iam.v2.Policies/UpgradeToV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoliciesServer).UpgradeToV2(ctx, req.(*request.UpgradeToV2Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _Policies_ResetToV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.ResetToV1Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoliciesServer).ResetToV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.iam.v2.Policies/ResetToV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoliciesServer).ResetToV1(ctx, req.(*request.ResetToV1Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _Policies_IntrospectAllProjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.ListProjectsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoliciesServer).IntrospectAllProjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.iam.v2.Policies/IntrospectAllProjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoliciesServer).IntrospectAllProjects(ctx, req.(*request.ListProjectsReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Policies_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chef.automate.api.iam.v2.Policies",
	HandlerType: (*PoliciesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePolicy",
			Handler:    _Policies_CreatePolicy_Handler,
		},
		{
			MethodName: "GetPolicy",
			Handler:    _Policies_GetPolicy_Handler,
		},
		{
			MethodName: "ListPolicies",
			Handler:    _Policies_ListPolicies_Handler,
		},
		{
			MethodName: "DeletePolicy",
			Handler:    _Policies_DeletePolicy_Handler,
		},
		{
			MethodName: "UpdatePolicy",
			Handler:    _Policies_UpdatePolicy_Handler,
		},
		{
			MethodName: "GetPolicyVersion",
			Handler:    _Policies_GetPolicyVersion_Handler,
		},
		{
			MethodName: "ListPolicyMembers",
			Handler:    _Policies_ListPolicyMembers_Handler,
		},
		{
			MethodName: "ReplacePolicyMembers",
			Handler:    _Policies_ReplacePolicyMembers_Handler,
		},
		{
			MethodName: "RemovePolicyMembers",
			Handler:    _Policies_RemovePolicyMembers_Handler,
		},
		{
			MethodName: "AddPolicyMembers",
			Handler:    _Policies_AddPolicyMembers_Handler,
		},
		{
			MethodName: "CreateRole",
			Handler:    _Policies_CreateRole_Handler,
		},
		{
			MethodName: "ListRoles",
			Handler:    _Policies_ListRoles_Handler,
		},
		{
			MethodName: "GetRole",
			Handler:    _Policies_GetRole_Handler,
		},
		{
			MethodName: "DeleteRole",
			Handler:    _Policies_DeleteRole_Handler,
		},
		{
			MethodName: "UpdateRole",
			Handler:    _Policies_UpdateRole_Handler,
		},
		{
			MethodName: "CreateProject",
			Handler:    _Policies_CreateProject_Handler,
		},
		{
			MethodName: "UpdateProject",
			Handler:    _Policies_UpdateProject_Handler,
		},
		{
			MethodName: "GetProject",
			Handler:    _Policies_GetProject_Handler,
		},
		{
			MethodName: "ListProjects",
			Handler:    _Policies_ListProjects_Handler,
		},
		{
			MethodName: "DeleteProject",
			Handler:    _Policies_DeleteProject_Handler,
		},
		{
			MethodName: "UpgradeToV2",
			Handler:    _Policies_UpgradeToV2_Handler,
		},
		{
			MethodName: "ResetToV1",
			Handler:    _Policies_ResetToV1_Handler,
		},
		{
			MethodName: "IntrospectAllProjects",
			Handler:    _Policies_IntrospectAllProjects_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "components/automate-gateway/api/iam/v2/policy.proto",
}
