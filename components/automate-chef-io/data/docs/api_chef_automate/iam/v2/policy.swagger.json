{
  "swagger": "2.0",
  "info": {
    "title": "components/automate-gateway/api/iam/v2/policy.proto",
    "version": "version not set"
  },
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/iam/v2/introspect_projects": {
      "get": {
        "operationId": "IntrospectAllProjects",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/chef.automate.api.iam.v2.ListProjectsResp"
            }
          }
        },
        "tags": [
          "hidden"
        ]
      }
    },
    "/iam/v2/policies": {
      "get": {
        "summary": "List all policies",
        "description": "List all policies.\n\nAuthorization Action:\n\n```\niam:policies:list\n```",
        "operationId": "ListPolicies",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/chef.automate.api.iam.v2.ListPoliciesResp"
            }
          }
        },
        "tags": [
          "policies"
        ]
      },
      "post": {
        "summary": "Create a new policy",
        "description": "Use Chef Automate IAM uses multi-statement policies to support complex permissions in a single policy.\n\nPrerequisites:\n\nBefore you can create a policy, you must first have:\n\nMembers*\nA policy requires a list of members.\nYou can create a policy with an empty member list.\nIn most cases, the policy member will be a user, a team, and/or an API token.\nMembers are assigned roles.\n\nRoles*\nA policy requires a role.\nA role defines a set of actions that its members are allowed to take on specific resources. Chef Automate comes with five pre-defined roles and you can also make custom roles.\n\nProjects*\nA policy requires a list of projects.\nYou can create a policy with an empty list.\nA project is a custom collection of definitions governing access to Chef Automate resources. Examples of resources are: compliance reports, Chef Infra Server events, and infrastructure nodes.\n\nAt its minimum, a policy connects a role to a project. You can apply policies at the top-level of the policy and at the statement-level. At the top-level, a policy applies to entire projects. At the statement-level, the projects list defines which projects that specific statement applies to.\n\nThe following example creates a \"Viewer Policy\" that grants the `viewer` role on a few projects for all LDAP teams and a custom role `qa` on a specific project, but it also creates a new policy not associated with any project (because the top-level `projects` property is empty)\n\n```\n{\n\"name\": \"Viewer Policy\",\n\"id\": \"viewer-policy\",\n\"members\": [\"team:ldap:*\"],\n\"statements\" : [\n{\n\"role\": \"viewer\",\n\"projects\": [\"project1\", \"project2\"]\n},\n{\n\"role\": \"qa\",\n\"projects\": [\"acceptanceProject\"]\n}\n],\n\"projects\": []\n}\n```\n\nAuthorization Action:\n\n```\niam:policies:create\n```",
        "operationId": "CreatePolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/chef.automate.api.iam.v2.CreatePolicyResp"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/chef.automate.api.iam.v2.CreatePolicyReq"
            }
          }
        ],
        "tags": [
          "policies"
        ]
      }
    },
    "/iam/v2/policies/{id}": {
      "get": {
        "summary": "Get a policy",
        "description": "Get a policy.\n\nAuthorization Action:\n\n```\niam:policies:get\n```",
        "operationId": "GetPolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/chef.automate.api.iam.v2.GetPolicyResp"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "policies"
        ]
      },
      "delete": {
        "summary": "Delete a policy",
        "description": "Delete a policy.\n\nAuthorization Action:\n\n```\niam:policies:delete\n```",
        "operationId": "DeletePolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/chef.automate.api.iam.v2.DeletePolicyResp"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "policies"
        ]
      },
      "put": {
        "summary": "Update a policy",
        "description": "Updating a policy is a PUT action and overwrites all of the policy's properties.\nWhen updating a policy, you must supply all of that policy's properties.\nAny missing properties are set to empty values.\n\nThe only exception is the policy ID, which is immutable; it can only be set at creation time.\n\nYou can use this endpoint to modify Custom policies but not Chef-managed policies.\n\nTo update only the  policy's members, use these endpoints instead:\nAdd policy members\nRemove policy members\nReplace policy members\n\nAuthorization Action:\n\n```\niam:policies:update\n```",
        "operationId": "UpdatePolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/chef.automate.api.iam.v2.UpdatePolicyResp"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Unique, user-specified ID. Cannot be changed.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/chef.automate.api.iam.v2.UpdatePolicyReq"
            }
          }
        ],
        "tags": [
          "policies"
        ]
      }
    },
    "/iam/v2/policies/{id}/members": {
      "get": {
        "summary": "List policy members",
        "description": "List all members of a specific policy.\n\nAuthorization Action:\n\n```\niam:policyMembers:get\n```",
        "operationId": "ListPolicyMembers",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/chef.automate.api.iam.v2.ListPolicyMembersResp"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "policies"
        ]
      },
      "put": {
        "summary": "Replace policy members",
        "description": "Replace the entire member list for a specific policy with a new list.\n\nUpdating a policy is a PUT action and overwrites the entire member list.\n\nEnsure each element of the members array is in the correct format.\nFor more information, refer to the \"Member Expressions\" section of\nthe IAM Guide in the Chef Automate documentation.\n\nThe only exception is the policy ID, which is immutable; it can only be set at creation time.\n\nAuthorization Action:\n\n```\niam:policyMembers:update\n```",
        "operationId": "ReplacePolicyMembers",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/chef.automate.api.iam.v2.ReplacePolicyMembersResp"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/chef.automate.api.iam.v2.ReplacePolicyMembersReq"
            }
          }
        ],
        "tags": [
          "policies"
        ]
      }
    },
    "/iam/v2/policies/{id}/members:add": {
      "post": {
        "summary": "Add policy members",
        "description": "Add members to the member list for a specific policy.\n\nFor more information, refer to the \"Member Expressions\" section of\nthe IAM Guide in the Chef Automate documentation.\n\nAuthorization Action:\n\n```\niam:policyMembers:create\n```",
        "operationId": "AddPolicyMembers",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/chef.automate.api.iam.v2.AddPolicyMembersResp"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/chef.automate.api.iam.v2.AddPolicyMembersReq"
            }
          }
        ],
        "tags": [
          "policies"
        ]
      }
    },
    "/iam/v2/policies/{id}/members:remove": {
      "post": {
        "summary": "Remove policy members",
        "description": "Remove specific members from the member list of a policy. Silently ignores\nmembers that are not already part of the member list.\n\nFor more information, refer to the \"Member Expressions\" section of\nthe IAM Guide in the Chef Automate documentation.\n\nMembers are only removed from the policy and  still exist within Chef Automate.\n\nAuthorization Action:\n\n```\niam:policyMembers:delete\n```",
        "operationId": "RemovePolicyMembers",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/chef.automate.api.iam.v2.RemovePolicyMembersResp"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/chef.automate.api.iam.v2.RemovePolicyMembersReq"
            }
          }
        ],
        "tags": [
          "policies"
        ]
      }
    },
    "/iam/v2/policy_version": {
      "get": {
        "summary": "Get IAM version",
        "description": "Returns the version of IAM for your Chef Automate installation.\n\nAuthorization Action:\n\n```\niam:policies:get\n```",
        "operationId": "GetPolicyVersion",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/chef.automate.api.iam.v2.GetPolicyVersionResp"
            }
          }
        },
        "tags": [
          "policies"
        ]
      }
    },
    "/iam/v2/projects": {
      "get": {
        "summary": "List all projects",
        "description": "Show all projects.\n\nAuthorization Action:\n\n```\niam:projects:list\n```",
        "operationId": "ListProjects",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/chef.automate.api.iam.v2.ListProjectsResp"
            }
          }
        },
        "tags": [
          "projects"
        ]
      },
      "post": {
        "summary": "Create a project",
        "description": "Creates a new project to be used in the policies that control permissions in Automate.\n\nA project defines the scope of resources in a policy statement. Resources can be in more than one project.\n\nAuthorization Action:\n\n```\niam:projects:create\n```",
        "operationId": "CreateProject",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/chef.automate.api.iam.v2.CreateProjectResp"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/chef.automate.api.iam.v2.CreateProjectReq"
            }
          }
        ],
        "tags": [
          "projects"
        ]
      }
    },
    "/iam/v2/projects/{id}": {
      "get": {
        "summary": "List a project",
        "description": "Show one project by ID.\n\nAuthorization Action:\n\n```\niam:projects:get\n```",
        "operationId": "GetProject",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/chef.automate.api.iam.v2.GetProjectResp"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "projects"
        ]
      },
      "delete": {
        "summary": "Delete a project",
        "description": "Deletes the project from any resources tagged with it.\n\nDeletes this project from any project list in all statements.\nIf a project list has no other statements, then the project list is deleted.\nIf a policy has no other statements, then the policy is deleted.\n\nAuthorization Action:\n\n```\niam:projects:delete\n```",
        "operationId": "DeleteProject",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/chef.automate.api.iam.v2.DeleteProjectResp"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "projects"
        ]
      },
      "put": {
        "summary": "Update a project",
        "description": "Update an existing project.\n\nUpdating a project is a PUT action and overwrites all of the project's properties.\nAny missing properties are set to empty values.\n\nThe only exception is the project ID, which is immutable; it can only be set at creation time.\n\nAuthorization Action:\n\n```\niam:projects:update\n```",
        "operationId": "UpdateProject",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/chef.automate.api.iam.v2.UpdateProjectResp"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Unique, user-specified ID. Cannot be changed.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/chef.automate.api.iam.v2.UpdateProjectReq"
            }
          }
        ],
        "tags": [
          "projects"
        ]
      }
    },
    "/iam/v2/roles": {
      "get": {
        "summary": "List all roles",
        "description": "List all *Chef-managed* and *Custom* roles.\n\nAuthorization Action:\n\n```\niam:roles:list\n```",
        "operationId": "ListRoles",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/chef.automate.api.iam.v2.ListRolesResp"
            }
          }
        },
        "tags": [
          "roles"
        ]
      },
      "post": {
        "summary": "Create a new role",
        "description": "Creates a new role for use in the policies that control permissions in Automate.\n\nA role defines the scope of actions in a policy statement.\n\nRoles that you create are *Custom* roles, and you have full control about modifying or deleting them.\nThe default *Chef-managed* roles are essential to the operation of Chef Automate\nand cannot be altered.\n\nAuthorization Action:\n\n```\niam:roles:create\n```",
        "operationId": "CreateRole",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/chef.automate.api.iam.v2.CreateRoleResp"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/chef.automate.api.iam.v2.CreateRoleReq"
            }
          }
        ],
        "tags": [
          "roles"
        ]
      }
    },
    "/iam/v2/roles/{id}": {
      "get": {
        "summary": "Get a role",
        "description": "Get a role.\n\nAuthorization Action:\n\n```\niam:roles:get\n```",
        "operationId": "GetRole",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/chef.automate.api.iam.v2.GetRoleResp"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "roles"
        ]
      },
      "delete": {
        "summary": "Delete a role",
        "description": "Deletes a role and removes it from all statements in which it is used.\nIf such a statement has no other associated actions, that statement is deleted as well.\nIf that statement removal results in a policy with no other statements,\nthat policy is also removed.\n\nAuthorization Action:\n\n```\niam:roles:delete\n```",
        "operationId": "DeleteRole",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/chef.automate.api.iam.v2.DeleteRoleResp"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "roles"
        ]
      },
      "put": {
        "summary": "Update a role",
        "description": "Updating a role is a PUT action and overwrites all of the role's properties.\nAny missing properties are set to empty values.\n\nThe only exception is the role ID, which is immutable; it can only be set at creation time.\n\nAuthorization Action:\n\n```\niam:roles:update\n```",
        "operationId": "UpdateRole",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/chef.automate.api.iam.v2.UpdateRoleResp"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Unique, user-specified ID. Cannot be changed.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/chef.automate.api.iam.v2.UpdateRoleReq"
            }
          }
        ],
        "tags": [
          "roles"
        ]
      }
    },
    "/iam/v2beta/introspect_projects": {
      "get": {
        "operationId": "IntrospectAllProjects2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/chef.automate.api.iam.v2.ListProjectsResp"
            }
          }
        },
        "tags": [
          "hidden"
        ]
      }
    },
    "/iam/v2beta/policies": {
      "post": {
        "summary": "Create a new policy",
        "description": "Use Chef Automate IAM uses multi-statement policies to support complex permissions in a single policy.\n\nPrerequisites:\n\nBefore you can create a policy, you must first have:\n\nMembers*\nA policy requires a list of members.\nYou can create a policy with an empty member list.\nIn most cases, the policy member will be a user, a team, and/or an API token.\nMembers are assigned roles.\n\nRoles*\nA policy requires a role.\nA role defines a set of actions that its members are allowed to take on specific resources. Chef Automate comes with five pre-defined roles and you can also make custom roles.\n\nProjects*\nA policy requires a list of projects.\nYou can create a policy with an empty list.\nA project is a custom collection of definitions governing access to Chef Automate resources. Examples of resources are: compliance reports, Chef Infra Server events, and infrastructure nodes.\n\nAt its minimum, a policy connects a role to a project. You can apply policies at the top-level of the policy and at the statement-level. At the top-level, a policy applies to entire projects. At the statement-level, the projects list defines which projects that specific statement applies to.\n\nThe following example creates a \"Viewer Policy\" that grants the `viewer` role on a few projects for all LDAP teams and a custom role `qa` on a specific project, but it also creates a new policy not associated with any project (because the top-level `projects` property is empty)\n\n```\n{\n\"name\": \"Viewer Policy\",\n\"id\": \"viewer-policy\",\n\"members\": [\"team:ldap:*\"],\n\"statements\" : [\n{\n\"role\": \"viewer\",\n\"projects\": [\"project1\", \"project2\"]\n},\n{\n\"role\": \"qa\",\n\"projects\": [\"acceptanceProject\"]\n}\n],\n\"projects\": []\n}\n```\n\nAuthorization Action:\n\n```\niam:policies:create\n```",
        "operationId": "CreatePolicy2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/chef.automate.api.iam.v2.CreatePolicyResp"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/chef.automate.api.iam.v2.CreatePolicyReq"
            }
          }
        ],
        "tags": [
          "policies"
        ]
      }
    },
    "/iam/v2beta/policies/{id}": {
      "delete": {
        "summary": "Delete a policy",
        "description": "Delete a policy.\n\nAuthorization Action:\n\n```\niam:policies:delete\n```",
        "operationId": "DeletePolicy2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/chef.automate.api.iam.v2.DeletePolicyResp"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "policies"
        ]
      },
      "put": {
        "summary": "Update a policy",
        "description": "Updating a policy is a PUT action and overwrites all of the policy's properties.\nWhen updating a policy, you must supply all of that policy's properties.\nAny missing properties are set to empty values.\n\nThe only exception is the policy ID, which is immutable; it can only be set at creation time.\n\nYou can use this endpoint to modify Custom policies but not Chef-managed policies.\n\nTo update only the  policy's members, use these endpoints instead:\nAdd policy members\nRemove policy members\nReplace policy members\n\nAuthorization Action:\n\n```\niam:policies:update\n```",
        "operationId": "UpdatePolicy2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/chef.automate.api.iam.v2.UpdatePolicyResp"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Unique, user-specified ID. Cannot be changed.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/chef.automate.api.iam.v2.UpdatePolicyReq"
            }
          }
        ],
        "tags": [
          "policies"
        ]
      }
    },
    "/iam/v2beta/policies/{id}/members": {
      "get": {
        "summary": "List policy members",
        "description": "List all members of a specific policy.\n\nAuthorization Action:\n\n```\niam:policyMembers:get\n```",
        "operationId": "ListPolicyMembers2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/chef.automate.api.iam.v2.ListPolicyMembersResp"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "policies"
        ]
      },
      "put": {
        "summary": "Replace policy members",
        "description": "Replace the entire member list for a specific policy with a new list.\n\nUpdating a policy is a PUT action and overwrites the entire member list.\n\nEnsure each element of the members array is in the correct format.\nFor more information, refer to the \"Member Expressions\" section of\nthe IAM Guide in the Chef Automate documentation.\n\nThe only exception is the policy ID, which is immutable; it can only be set at creation time.\n\nAuthorization Action:\n\n```\niam:policyMembers:update\n```",
        "operationId": "ReplacePolicyMembers2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/chef.automate.api.iam.v2.ReplacePolicyMembersResp"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/chef.automate.api.iam.v2.ReplacePolicyMembersReq"
            }
          }
        ],
        "tags": [
          "policies"
        ]
      }
    },
    "/iam/v2beta/policies/{id}/members:add": {
      "post": {
        "summary": "Add policy members",
        "description": "Add members to the member list for a specific policy.\n\nFor more information, refer to the \"Member Expressions\" section of\nthe IAM Guide in the Chef Automate documentation.\n\nAuthorization Action:\n\n```\niam:policyMembers:create\n```",
        "operationId": "AddPolicyMembers2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/chef.automate.api.iam.v2.AddPolicyMembersResp"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/chef.automate.api.iam.v2.AddPolicyMembersReq"
            }
          }
        ],
        "tags": [
          "policies"
        ]
      }
    },
    "/iam/v2beta/policies/{id}/members:remove": {
      "post": {
        "summary": "Remove policy members",
        "description": "Remove specific members from the member list of a policy. Silently ignores\nmembers that are not already part of the member list.\n\nFor more information, refer to the \"Member Expressions\" section of\nthe IAM Guide in the Chef Automate documentation.\n\nMembers are only removed from the policy and  still exist within Chef Automate.\n\nAuthorization Action:\n\n```\niam:policyMembers:delete\n```",
        "operationId": "RemovePolicyMembers2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/chef.automate.api.iam.v2.RemovePolicyMembersResp"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/chef.automate.api.iam.v2.RemovePolicyMembersReq"
            }
          }
        ],
        "tags": [
          "policies"
        ]
      }
    },
    "/iam/v2beta/policy_version": {
      "get": {
        "summary": "Get IAM version",
        "description": "Returns the version of IAM for your Chef Automate installation.\n\nAuthorization Action:\n\n```\niam:policies:get\n```",
        "operationId": "GetPolicyVersion2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/chef.automate.api.iam.v2.GetPolicyVersionResp"
            }
          }
        },
        "tags": [
          "policies"
        ]
      }
    },
    "/iam/v2beta/projects": {
      "get": {
        "summary": "List all projects",
        "description": "Show all projects.\n\nAuthorization Action:\n\n```\niam:projects:list\n```",
        "operationId": "ListProjects2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/chef.automate.api.iam.v2.ListProjectsResp"
            }
          }
        },
        "tags": [
          "projects"
        ]
      },
      "post": {
        "summary": "Create a project",
        "description": "Creates a new project to be used in the policies that control permissions in Automate.\n\nA project defines the scope of resources in a policy statement. Resources can be in more than one project.\n\nAuthorization Action:\n\n```\niam:projects:create\n```",
        "operationId": "CreateProject2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/chef.automate.api.iam.v2.CreateProjectResp"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/chef.automate.api.iam.v2.CreateProjectReq"
            }
          }
        ],
        "tags": [
          "projects"
        ]
      }
    },
    "/iam/v2beta/projects/{id}": {
      "get": {
        "summary": "List a project",
        "description": "Show one project by ID.\n\nAuthorization Action:\n\n```\niam:projects:get\n```",
        "operationId": "GetProject2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/chef.automate.api.iam.v2.GetProjectResp"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "projects"
        ]
      },
      "delete": {
        "summary": "Delete a project",
        "description": "Deletes the project from any resources tagged with it.\n\nDeletes this project from any project list in all statements.\nIf a project list has no other statements, then the project list is deleted.\nIf a policy has no other statements, then the policy is deleted.\n\nAuthorization Action:\n\n```\niam:projects:delete\n```",
        "operationId": "DeleteProject2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/chef.automate.api.iam.v2.DeleteProjectResp"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "projects"
        ]
      },
      "put": {
        "summary": "Update a project",
        "description": "Update an existing project.\n\nUpdating a project is a PUT action and overwrites all of the project's properties.\nAny missing properties are set to empty values.\n\nThe only exception is the project ID, which is immutable; it can only be set at creation time.\n\nAuthorization Action:\n\n```\niam:projects:update\n```",
        "operationId": "UpdateProject2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/chef.automate.api.iam.v2.UpdateProjectResp"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Unique, user-specified ID. Cannot be changed.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/chef.automate.api.iam.v2.UpdateProjectReq"
            }
          }
        ],
        "tags": [
          "projects"
        ]
      }
    },
    "/iam/v2beta/roles": {
      "get": {
        "summary": "List all roles",
        "description": "List all *Chef-managed* and *Custom* roles.\n\nAuthorization Action:\n\n```\niam:roles:list\n```",
        "operationId": "ListRoles2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/chef.automate.api.iam.v2.ListRolesResp"
            }
          }
        },
        "tags": [
          "roles"
        ]
      },
      "post": {
        "summary": "Create a new role",
        "description": "Creates a new role for use in the policies that control permissions in Automate.\n\nA role defines the scope of actions in a policy statement.\n\nRoles that you create are *Custom* roles, and you have full control about modifying or deleting them.\nThe default *Chef-managed* roles are essential to the operation of Chef Automate\nand cannot be altered.\n\nAuthorization Action:\n\n```\niam:roles:create\n```",
        "operationId": "CreateRole2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/chef.automate.api.iam.v2.CreateRoleResp"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/chef.automate.api.iam.v2.CreateRoleReq"
            }
          }
        ],
        "tags": [
          "roles"
        ]
      }
    },
    "/iam/v2beta/roles/{id}": {
      "get": {
        "summary": "Get a role",
        "description": "Get a role.\n\nAuthorization Action:\n\n```\niam:roles:get\n```",
        "operationId": "GetRole2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/chef.automate.api.iam.v2.GetRoleResp"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "roles"
        ]
      },
      "delete": {
        "summary": "Delete a role",
        "description": "Deletes a role and removes it from all statements in which it is used.\nIf such a statement has no other associated actions, that statement is deleted as well.\nIf that statement removal results in a policy with no other statements,\nthat policy is also removed.\n\nAuthorization Action:\n\n```\niam:roles:delete\n```",
        "operationId": "DeleteRole2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/chef.automate.api.iam.v2.DeleteRoleResp"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "roles"
        ]
      },
      "put": {
        "summary": "Update a role",
        "description": "Updating a role is a PUT action and overwrites all of the role's properties.\nAny missing properties are set to empty values.\n\nThe only exception is the role ID, which is immutable; it can only be set at creation time.\n\nAuthorization Action:\n\n```\niam:roles:update\n```",
        "operationId": "UpdateRole2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/chef.automate.api.iam.v2.UpdateRoleResp"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Unique, user-specified ID. Cannot be changed.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/chef.automate.api.iam.v2.UpdateRoleReq"
            }
          }
        ],
        "tags": [
          "roles"
        ]
      }
    }
  },
  "definitions": {
    "chef.automate.api.iam.v2.AddPolicyMembersReq": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "members": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of members to add to the policy."
        }
      }
    },
    "chef.automate.api.iam.v2.AddPolicyMembersResp": {
      "type": "object",
      "properties": {
        "members": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Resulting list of policy members."
        }
      }
    },
    "chef.automate.api.iam.v2.CreatePolicyReq": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique, user-specified ID. Cannot be changed."
        },
        "name": {
          "type": "string",
          "description": "Name for the new policy."
        },
        "members": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Members affected by this policy."
        },
        "statements": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/chef.automate.api.iam.v2.Statement"
          },
          "description": "Statements for the new policy. Must contain one or more."
        },
        "projects": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The list of projects this policy belongs to."
        }
      },
      "description": "Does not contain type as the enduser can only create 'custom' policies."
    },
    "chef.automate.api.iam.v2.CreatePolicyResp": {
      "type": "object",
      "properties": {
        "policy": {
          "$ref": "#/definitions/chef.automate.api.iam.v2.Policy"
        }
      }
    },
    "chef.automate.api.iam.v2.CreateProjectReq": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique, user-specified ID. Cannot be changed."
        },
        "name": {
          "type": "string",
          "description": "Name for the new project."
        }
      }
    },
    "chef.automate.api.iam.v2.CreateProjectResp": {
      "type": "object",
      "properties": {
        "project": {
          "$ref": "#/definitions/chef.automate.api.iam.v2.Project"
        }
      }
    },
    "chef.automate.api.iam.v2.CreateRoleReq": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique, user-specified ID. Cannot be changed."
        },
        "name": {
          "type": "string",
          "description": "Name for the new role."
        },
        "actions": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of actions that this role scopes to."
        },
        "projects": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The list of projects this role belongs to."
        }
      },
      "description": "Does not contain type as the enduser can only create 'custom' roles."
    },
    "chef.automate.api.iam.v2.CreateRoleResp": {
      "type": "object",
      "properties": {
        "role": {
          "$ref": "#/definitions/chef.automate.api.iam.v2.Role"
        }
      }
    },
    "chef.automate.api.iam.v2.DeletePolicyResp": {
      "type": "object"
    },
    "chef.automate.api.iam.v2.DeleteProjectResp": {
      "type": "object"
    },
    "chef.automate.api.iam.v2.DeleteRoleResp": {
      "type": "object"
    },
    "chef.automate.api.iam.v2.Flag": {
      "type": "string",
      "enum": [
        "VERSION_2_0",
        "VERSION_2_1"
      ],
      "default": "VERSION_2_0"
    },
    "chef.automate.api.iam.v2.GetPolicyResp": {
      "type": "object",
      "properties": {
        "policy": {
          "$ref": "#/definitions/chef.automate.api.iam.v2.Policy"
        }
      }
    },
    "chef.automate.api.iam.v2.GetPolicyVersionResp": {
      "type": "object",
      "properties": {
        "version": {
          "$ref": "#/definitions/chef.automate.api.iam.v2.Version"
        }
      }
    },
    "chef.automate.api.iam.v2.GetProjectResp": {
      "type": "object",
      "properties": {
        "project": {
          "$ref": "#/definitions/chef.automate.api.iam.v2.Project"
        }
      }
    },
    "chef.automate.api.iam.v2.GetRoleResp": {
      "type": "object",
      "properties": {
        "role": {
          "$ref": "#/definitions/chef.automate.api.iam.v2.Role"
        }
      }
    },
    "chef.automate.api.iam.v2.ListPoliciesResp": {
      "type": "object",
      "properties": {
        "policies": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/chef.automate.api.iam.v2.Policy"
          }
        }
      }
    },
    "chef.automate.api.iam.v2.ListPolicyMembersResp": {
      "type": "object",
      "properties": {
        "members": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of policy members."
        }
      }
    },
    "chef.automate.api.iam.v2.ListProjectsResp": {
      "type": "object",
      "properties": {
        "projects": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/chef.automate.api.iam.v2.Project"
          }
        }
      }
    },
    "chef.automate.api.iam.v2.ListRolesResp": {
      "type": "object",
      "properties": {
        "roles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/chef.automate.api.iam.v2.Role"
          }
        }
      }
    },
    "chef.automate.api.iam.v2.Policy": {
      "type": "object",
      "example": {
        "name": "My Viewer Policy",
        "id": "viewer-policy",
        "type": [
          "CUSTOM",
          "CHEF_MANAGED"
        ],
        "members": [
          "team:ldap:*"
        ],
        "statement": [
          {
            "role": "viewer",
            "projects": [
              "project1",
              "project2"
            ]
          },
          {
            "role": "qa",
            "projects": [
              "acceptanceProject"
            ]
          }
        ],
        "projects": []
      },
      "properties": {
        "name": {
          "type": "string",
          "description": "Name for the policy."
        },
        "id": {
          "type": "string",
          "description": "Unique, user-specified ID. Cannot be changed."
        },
        "type": {
          "$ref": "#/definitions/chef.automate.api.iam.v2.Type",
          "description": "Whether this policy is user created or chef managed.\nOne of `CUSTOM` or `CHEF_MANAGED`, respectively."
        },
        "members": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Members affected by this policy."
        },
        "statements": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/chef.automate.api.iam.v2.Statement"
          },
          "description": "Statements for the policy. Must contain one or more."
        },
        "projects": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The list of projects this policy belongs to."
        }
      },
      "title": "These are Policies"
    },
    "chef.automate.api.iam.v2.Project": {
      "type": "object",
      "example": {
        "name": "project-devops",
        "id": "project-devops",
        "type": "CHEF_MANAGED",
        "status": []
      },
      "properties": {
        "name": {
          "type": "string",
          "description": "Name for the project."
        },
        "id": {
          "type": "string",
          "description": "Unique, user-specified ID. Cannot be changed."
        },
        "type": {
          "$ref": "#/definitions/chef.automate.api.iam.v2.Type",
          "description": "Whether this policy is user created or chef managed.\nOne of `CUSTOM` or `CHEF_MANAGED`, respectively."
        },
        "status": {
          "$ref": "#/definitions/chef.automate.api.iam.v2.ProjectRulesStatus",
          "description": "The current status of the rules for this project."
        }
      }
    },
    "chef.automate.api.iam.v2.ProjectRulesStatus": {
      "type": "string",
      "enum": [
        "PROJECT_RULES_STATUS_UNSET",
        "RULES_APPLIED",
        "EDITS_PENDING",
        "NO_RULES"
      ],
      "default": "PROJECT_RULES_STATUS_UNSET"
    },
    "chef.automate.api.iam.v2.RemovePolicyMembersReq": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "members": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of members to remove from the policy."
        }
      }
    },
    "chef.automate.api.iam.v2.RemovePolicyMembersResp": {
      "type": "object",
      "properties": {
        "members": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Resulting list of policy members."
        }
      }
    },
    "chef.automate.api.iam.v2.ReplacePolicyMembersReq": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "members": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of members that replaces previous policy member list."
        }
      }
    },
    "chef.automate.api.iam.v2.ReplacePolicyMembersResp": {
      "type": "object",
      "properties": {
        "members": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Resulting list of policy members."
        }
      }
    },
    "chef.automate.api.iam.v2.ResetToV1Resp": {
      "type": "object"
    },
    "chef.automate.api.iam.v2.Role": {
      "type": "object",
      "example": {
        "role": "Editor",
        "id": "project-editors",
        "type": "CHEF_MANAGED",
        "actions": [
          "iam:users:update",
          "iam:users:list",
          "iam:users:get",
          "iam:teams:update",
          "iam:teams:list",
          "iam:teams:get"
        ],
        "projects": [
          "project-devops"
        ]
      },
      "properties": {
        "name": {
          "type": "string",
          "description": "Name for the role."
        },
        "id": {
          "type": "string",
          "description": "Unique, user-specified ID. Cannot be changed."
        },
        "type": {
          "$ref": "#/definitions/chef.automate.api.iam.v2.Type",
          "description": "Whether this policy is user created or chef managed.\nOne of `CUSTOM` or `CHEF_MANAGED`, respectively."
        },
        "actions": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of actions that this role scopes to."
        },
        "projects": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The list of projects this role belongs to."
        }
      },
      "title": "These are Roles"
    },
    "chef.automate.api.iam.v2.Statement": {
      "type": "object",
      "example": {
        "id": "team-managers-devops",
        "members": [
          "user:local:bob",
          "user:local:gamma"
        ],
        "name": "Team Devops Managers",
        "projects": [
          "project-devops"
        ],
        "statements": {
          "effect": "ALLOW",
          "actions": [
            "iam:users:update",
            "iam:users:list",
            "iam:users:get",
            "iam:teams:update",
            "iam:teams:list",
            "iam:teams:get"
          ]
        }
      },
      "properties": {
        "effect": {
          "$ref": "#/definitions/chef.automate.api.iam.v2.Statement.Effect",
          "description": "Whether the statement allows or denies.\nOne of `ALLOW` or `DENY`, respectively."
        },
        "actions": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Defines the actions for the members of this policy. The best practice is to use chef-managed roles or to define custom roles for unique action sets."
        },
        "role": {
          "type": "string",
          "description": "The role defines a set of actions that the statement is scoped to."
        },
        "resources": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "DEPRECATED: Resources defined inline. Use projects instead."
        },
        "projects": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The project list defines the set of resources that the statement is scoped to."
        }
      },
      "title": "These are projects"
    },
    "chef.automate.api.iam.v2.Statement.Effect": {
      "type": "string",
      "enum": [
        "ALLOW",
        "DENY"
      ],
      "default": "ALLOW"
    },
    "chef.automate.api.iam.v2.Type": {
      "type": "string",
      "enum": [
        "CHEF_MANAGED",
        "CUSTOM"
      ],
      "default": "CHEF_MANAGED"
    },
    "chef.automate.api.iam.v2.UpdatePolicyReq": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique, user-specified ID. Cannot be changed."
        },
        "members": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Members affected by this policy."
        },
        "statements": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/chef.automate.api.iam.v2.Statement"
          },
          "description": "Statements for the policy. Must contain one or more."
        },
        "name": {
          "type": "string",
          "description": "Name for this policy."
        },
        "projects": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The list of projects this policy belongs to."
        }
      },
      "description": "Does not contain type as the enduser can only create 'custom' policies."
    },
    "chef.automate.api.iam.v2.UpdatePolicyResp": {
      "type": "object",
      "properties": {
        "policy": {
          "$ref": "#/definitions/chef.automate.api.iam.v2.Policy"
        }
      }
    },
    "chef.automate.api.iam.v2.UpdateProjectReq": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique, user-specified ID. Cannot be changed."
        },
        "name": {
          "type": "string",
          "description": "Name for the project."
        }
      }
    },
    "chef.automate.api.iam.v2.UpdateProjectResp": {
      "type": "object",
      "properties": {
        "project": {
          "$ref": "#/definitions/chef.automate.api.iam.v2.Project"
        }
      }
    },
    "chef.automate.api.iam.v2.UpdateRoleReq": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique, user-specified ID. Cannot be changed."
        },
        "name": {
          "type": "string",
          "description": "Name for the role."
        },
        "actions": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of actions that this role scopes to."
        },
        "projects": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The list of projects this role belongs to."
        }
      }
    },
    "chef.automate.api.iam.v2.UpdateRoleResp": {
      "type": "object",
      "properties": {
        "role": {
          "$ref": "#/definitions/chef.automate.api.iam.v2.Role"
        }
      }
    },
    "chef.automate.api.iam.v2.UpgradeToV2Resp": {
      "type": "object",
      "properties": {
        "reports": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "chef.automate.api.iam.v2.Version": {
      "type": "object",
      "properties": {
        "major": {
          "$ref": "#/definitions/chef.automate.api.iam.v2.Version.VersionNumber"
        },
        "minor": {
          "$ref": "#/definitions/chef.automate.api.iam.v2.Version.VersionNumber"
        }
      }
    },
    "chef.automate.api.iam.v2.Version.VersionNumber": {
      "type": "string",
      "enum": [
        "V0",
        "V1",
        "V2"
      ],
      "default": "V0"
    }
  }
}
