#!{{pkgPathFor "core/bash"}}/bin/bash

exec 2>&1

source {{pkg.svc_config_path}}/health_check

{{#if svc.me.cfg.http-host ~}}
HOST="{{svc.me.sys.ip}}"

{{else}}
HOST="127.0.0.1"

{{/if ~}}

{{! Handlebars doesn't allow else-if style statements so we have to handle
    two exit early cases before rendering the post hook if either of those
    conditions are not met
~}}

{{#if cfg.disable ~}}
# ElasticSearch has been disabled via config, exit early.
touch ${POST_RUN_SENTINEL}
exit 0

{{/if ~}}

{{#if cfg.deprecated.external_es ~}}
# We're using the deprecated external ElasticSearch proxy node, exit early.
touch ${POST_RUN_SENTINEL}
exit 0

{{/if ~}}

# ElasticSearch >= 6 doesn't allow configuring index settings in the elasticsearch.yml.
# We're using this hook to configure the default index settings after the service
# has initialized enough to service queries.

# The post-run hook is fired immediately after the run hook, therefore it's
# unlikely that elasticsearch is healthy. We call the health-check wait_until_healthy
# function which waits until ElasticSearch returns green or yellow.

# We give it a default timeout of 600 seconds to ensure that the post-run
# hook will eventually time out. We do this because Habitat does not currently
# reap hooks if the service is unloaded. We don't want to end up in a place
# where we have to restart the supervisor because of a zombie hook:
# https://github.com/habitat-sh/habitat/issues/7494

if [[ $(wait_until_healthy 600) -ne 0 ]]; then
  echo "ERROR: Timed out waiting for ElasticSearch to become healthy, unable to apply index settings"
  touch ${POST_RUN_SENTINEL}
  exit 0 # always exit 0 in post-run or it'll retry the hook
fi

echo "Configuring index settings"
curl \
  -s \
  -i \
  -H 'Content-Type: application/json'\
  -X PUT "http://${HOST}:{{cfg.network.port}}/_all/_settings?preserve_existing=true" \
  -d '{
    "index.number_of_replicas": "{{cfg.index.number_of_replicas}}",
    "index.refresh_interval": "{{cfg.index.refresh_interval}}"
  }'

# The health-check hook will return an error unless we touch sentinel file to
# signal to the health check that this hook has completed successfully.
touch ${POST_RUN_SENTINEL}

exit 0
